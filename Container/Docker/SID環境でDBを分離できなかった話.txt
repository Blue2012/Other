
１．問題発覚の経緯

docker-composeコマンドで、Docker上のコンテナRedmineとホスト上のDBを接続しようとした際に、
デフォルトのネットワークモードである「network_mode: "bridge"」では、
ホスト上のDBと接続することが出来なかった。
※接続タイムアウトとなった。

【docker-composeのyamlリファレンス】
http://docs.docker.jp/compose/compose-file.html

そこで、以下のサイト情報を参考にして、ネットワークモードを「network_mode: "host"」に変更したところ、
ホスト上のDBと接続することができるようになった。

<参考サイト>Docker network 概論
https://qiita.com/TsutomuNakamura/items/ed046ee21caca4a2ffd9

ただ、SID検証環境上のRedmineでは環境上の特性ともいえる問題があり、
そのままでは、HTTPSでの接続することが出来なかった。

２．ホストのDBに隔離することは出来たが、NAPTの問題が発生した

[1]Redmineのコンテナ外部に公開されるポート番号が「10043」から「443」に変化した
デフォルトのネットワークモードである「network_mode: "bridge"」では、
コンテナ内で通信するポートとホスト上で公開するポートを紐づける設定である「ports:」の設定を利用することができた。
しかし、「network_mode: "host"」に変更したことで、Redmineコンテナがそのままホストに公開されることにより、
「10043」から「443」のポート番号でホスト上で公開される形に構成変更が発生した。

<該当する設定箇所>
ports:
- "10043:443"

※上記、ホスト側:コンテナ側（10043:443）の見方をする。

[2]SID検証環境はNAPT前提の環境となっている
SID検証環境では外部からのアクセスをする際にCiscoASAを経由して通信アクセスする構成となっているが、
1つのグローバルIPを流用していることから、HTTPS接続のポート番号は443を利用することができない。
※ポート番号が枯渇しないように考慮する必要がある。

上記の通り、NAPTを前提としていることから、Dockerコンテナ内でRedmineの公開ポート番号を
10043(CiscoASAのNAPTで紐づけているポート番号)として、Listen状態にする必要がある。

[3]ホスト側443で公開されたポートを10043に変換する工夫を思いつくことが出来なかった

1案として、考えたのが、nginxのコンテナをRedmineのコンテナとは別に併設して、
nginxコンテナはデフォルトのまま「network_mode: "bridge"」で設定するため、
「ports:」の設定を利用し、ホスト上に「10043」を公開することに成功した。

ただし、nginxコンテナを経由して、Redmineコンテナで公開しているコンテンツ(Redmineのトップディレクティブ)へ
アクセスさせる方法が分からず、手詰まりとなってしまった。

３．結論
docker-composeコマンドでRedmineを構築する際に、単純にコンテナからDBを分離して、
ホスト上のDB（もしくは別ホストのDB）にアクセスさせ、構築させることは可能であることは分かった。
ただし、SID固有の環境問題により、DBを分離させることは容易ではなかった。
何かしらの対処策を講じて、NAPTの問題を解決する方法が必要である。
